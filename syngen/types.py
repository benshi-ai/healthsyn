from numpy import ndarray  # noqa: F401
from typing import Hashable, TypeVar
from pydantic import BaseModel, StrictInt


SimpleEffect = float
Effect = dict[str, float]


class ChainDict(BaseModel):
    """Dict representation of a time continuous markov chain.

    Fields
    ------
    hold: dict
        The mapping from states to average holding times.

    jump: dict of dict
        The mapping from a source state to a dict of destination states and
        their probabilities. Determines the set of states in the chain.

    init: str
        The label of the chain's initial state.
    """

    hold: dict[str, float]
    jump: dict[str, dict[str, float]]
    init: str


class Chain(BaseModel):
    """Numpy representation of a time continuous markov chain.

    Fields
    ------
    hold: ndarray, shape = (n_states,)
        The vector of average state holding times.

    jump: ndarray, shape = (n_states, n_states)
        The column-stochastic transition probability matrix.

    init: int
        The initial state number.

    labels: list of str, length = n_states
        The names of states generated by the chain.

    """

    hold: ndarray
    jump: ndarray
    init: StrictInt | ndarray
    labels: list[str] = None

    class Config:
        arbitrary_types_allowed = True


class SyngenDefn(BaseModel):
    archetypes: dict[str, ChainDict]
    effects: dict[str, Effect]


class Nudge(BaseModel):
    tags: list[str] | dict[str, float]


EffectMessage = tuple[float, tuple[Hashable, Effect]]
NudgeMessage = tuple[float, tuple[Hashable, Nudge]]


Event = tuple[float, TypeVar("T")]
